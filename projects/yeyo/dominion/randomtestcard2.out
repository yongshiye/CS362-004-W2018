
====TESTING VILLAGE CARD:====
========RANDOM TESTS=========
Check Players State 0
Check Players State 1
Check Players State 2
Check Players State 3
Check Players State 4
Check Players State 5
Check Players State 6
Check Players State 7
Check Players State 8
Check Players State 9
Check Players State 10
Check Players State 11
Check Players State 12
Check Players State 13
Check Players State 14
Check Players State 15
Check Players State 16
Check Players State 17
Check Players State 18
Check Players State 19
Check Players State 20
Check Players State 21
Check Players State 22
Check Players State 23
Check Players State 24
Check Players State 25
Check Players State 26
Check Players State 27
Check Players State 28
Check Players State 29
Check Players State 30
Check Players State 31
Check Players State 32
Check Players State 33
Check Players State 34
Check Players State 35
Check Players State 36
Check Players State 37
Check Players State 38
Check Players State 39
Check Players State 40
Check Players State 41
Check Players State 42
Check Players State 43
Check Players State 44
Check Players State 45
Check Players State 46
Check Players State 47
Check Players State 48
Check Players State 49
Check Players State 50
Check Players State 51
Check Players State 52
Check Players State 53
Check Players State 54
Check Players State 55
Check Players State 56
Check Players State 57
Check Players State 58
Check Players State 59
Check Players State 60
Check Players State 61
Check Players State 62
Check Players State 63
Check Players State 64
Check Players State 65
Check Players State 66
Check Players State 67
Check Players State 68
Check Players State 69
Check Players State 70
Check Players State 71
Check Players State 72
Check Players State 73
Check Players State 74
Check Players State 75
Check Players State 76
Check Players State 77
Check Players State 78
Check Players State 79
Check Players State 80
Check Players State 81
Check Players State 82
Check Players State 83
Check Players State 84
Check Players State 85
Check Players State 86
Check Players State 87
Check Players State 88
Check Players State 89
Check Players State 90
Check Players State 91
Check Players State 92
Check Players State 93
Check Players State 94
Check Players State 95
Check Players State 96
Check Players State 97
Check Players State 98
Check Players State 99
Check Players State 100
Check Players State 101
Check Players State 102
Check Players State 103
Check Players State 104
Check Players State 105
Check Players State 106
Check Players State 107
Check Players State 108
Check Players State 109
Check Players State 110
Check Players State 111
Check Players State 112
Check Players State 113
Check Players State 114
Check Players State 115
Check Players State 116
Check Players State 117
Check Players State 118
Check Players State 119
Check Players State 120
Check Players State 121
Check Players State 122
Check Players State 123
Check Players State 124
Check Players State 125
Check Players State 126
Check Players State 127
Check Players State 128
Check Players State 129
Check Players State 130
Check Players State 131
Check Players State 132
Check Players State 133
Check Players State 134
Check Players State 135
Check Players State 136
Check Players State 137
Check Players State 138
Check Players State 139
Check Players State 140
Check Players State 141
Check Players State 142
Check Players State 143
Check Players State 144
Check Players State 145
Check Players State 146
Check Players State 147
Check Players State 148
Check Players State 149
Check Players State 150
Check Players State 151
Check Players State 152
Check Players State 153
Check Players State 154
Check Players State 155
Check Players State 156
Check Players State 157
Check Players State 158
Check Players State 159
Check Players State 160
Check Players State 161
Check Players State 162
Check Players State 163
Check Players State 164
Check Players State 165
Check Players State 166
Check Players State 167
Check Players State 168
Check Players State 169
Check Players State 170
Check Players State 171
Check Players State 172
Check Players State 173
Check Players State 174
Check Players State 175
Check Players State 176
Check Players State 177
Check Players State 178
Check Players State 179
Check Players State 180
Check Players State 181
Check Players State 182
Check Players State 183
Check Players State 184
Check Players State 185
Check Players State 186
Check Players State 187
Check Players State 188
Check Players State 189
Check Players State 190
Check Players State 191
Check Players State 192
Check Players State 193
Check Players State 194
Check Players State 195
Check Players State 196
Check Players State 197
Check Players State 198
Check Players State 199
Check Players State 200
Check Players State 201
Check Players State 202
Check Players State 203
Check Players State 204
Check Players State 205
Check Players State 206
Check Players State 207
Check Players State 208
Check Players State 209
Check Players State 210
Check Players State 211
Check Players State 212
Check Players State 213
Check Players State 214
Check Players State 215
Check Players State 216
Check Players State 217
Check Players State 218
Check Players State 219
Check Players State 220
Check Players State 221
Check Players State 222
Check Players State 223
Check Players State 224
Check Players State 225
Check Players State 226
Check Players State 227
Check Players State 228
Check Players State 229
Check Players State 230
Check Players State 231
Check Players State 232
Check Players State 233
Check Players State 234
Check Players State 235
Check Players State 236
Check Players State 237
Check Players State 238
Check Players State 239
Check Players State 240
Check Players State 241
Check Players State 242
Check Players State 243
Check Players State 244
Check Players State 245
Check Players State 246
Check Players State 247
Check Players State 248
Check Players State 249
Check Players State 250
Check Players State 251
Check Players State 252
Check Players State 253
Check Players State 254
Check Players State 255
Check Players State 256
Check Players State 257
Check Players State 258
Check Players State 259
Check Players State 260
Check Players State 261
Check Players State 262
Check Players State 263
Check Players State 264
Check Players State 265
Check Players State 266
Check Players State 267
Check Players State 268
Check Players State 269
Check Players State 270
Check Players State 271
Check Players State 272
Check Players State 273
Check Players State 274
Check Players State 275
Check Players State 276
Check Players State 277
Check Players State 278
Check Players State 279
Check Players State 280
Check Players State 281
Check Players State 282
Check Players State 283
Check Players State 284
Check Players State 285
Check Players State 286
Check Players State 287
Check Players State 288
Check Players State 289
Check Players State 290
Check Players State 291
Check Players State 292
Check Players State 293
Check Players State 294
Check Players State 295
Check Players State 296
Check Players State 297
Check Players State 298
Check Players State 299
Check Players State 300
Check Players State 301
Check Players State 302
Check Players State 303
Check Players State 304
Check Players State 305
Check Players State 306
Check Players State 307
Check Players State 308
Check Players State 309
Check Players State 310
Check Players State 311
Check Players State 312
Check Players State 313
Check Players State 314
Check Players State 315
Check Players State 316
Check Players State 317
Check Players State 318
Check Players State 319
Check Players State 320
Check Players State 321
Check Players State 322
Check Players State 323
Check Players State 324
Check Players State 325
Check Players State 326
Check Players State 327
Check Players State 328
Check Players State 329
Check Players State 330
Check Players State 331
Check Players State 332
Check Players State 333
Check Players State 334
Check Players State 335
Check Players State 336
Check Players State 337
Check Players State 338
Check Players State 339
Check Players State 340
Check Players State 341
Check Players State 342
Check Players State 343
Check Players State 344
Check Players State 345
Check Players State 346
Check Players State 347
Check Players State 348
Check Players State 349
Check Players State 350
Check Players State 351
Check Players State 352
Check Players State 353
Check Players State 354
Check Players State 355
Check Players State 356
Check Players State 357
Check Players State 358
Check Players State 359
Check Players State 360
Check Players State 361
Check Players State 362
Check Players State 363
Check Players State 364
Check Players State 365
Check Players State 366
Check Players State 367
Check Players State 368
Check Players State 369
Check Players State 370
Check Players State 371
Check Players State 372
Check Players State 373
Check Players State 374
Check Players State 375
Check Players State 376
Check Players State 377
Check Players State 378
Check Players State 379
Check Players State 380
Check Players State 381
Check Players State 382
Check Players State 383
Check Players State 384
Check Players State 385
Check Players State 386
Check Players State 387
Check Players State 388
Check Players State 389
Check Players State 390
Check Players State 391
Check Players State 392
Check Players State 393
Check Players State 394
Check Players State 395
Check Players State 396
Check Players State 397
Check Players State 398
Check Players State 399
Check Players State 400
Check Players State 401
Check Players State 402
Check Players State 403
Check Players State 404
Check Players State 405
Check Players State 406
Check Players State 407
Check Players State 408
Check Players State 409
Check Players State 410
Check Players State 411
Check Players State 412
Check Players State 413
Check Players State 414
Check Players State 415
Check Players State 416
Check Players State 417
Check Players State 418
Check Players State 419
Check Players State 420
Check Players State 421
Check Players State 422
Check Players State 423
Check Players State 424
Check Players State 425
Check Players State 426
Check Players State 427
Check Players State 428
Check Players State 429
Check Players State 430
Check Players State 431
Check Players State 432
Check Players State 433
Check Players State 434
Check Players State 435
Check Players State 436
Check Players State 437
Check Players State 438
Check Players State 439
Check Players State 440
Check Players State 441
Check Players State 442
Check Players State 443
Check Players State 444
Check Players State 445
Check Players State 446
Check Players State 447
Check Players State 448
Check Players State 449
Check Players State 450
Check Players State 451
Check Players State 452
Check Players State 453
Check Players State 454
Check Players State 455
Check Players State 456
Check Players State 457
Check Players State 458
Check Players State 459
Check Players State 460
Check Players State 461
Check Players State 462
Check Players State 463
Check Players State 464
Check Players State 465
Check Players State 466
Check Players State 467
Check Players State 468
Check Players State 469
Check Players State 470
Check Players State 471
Check Players State 472
Check Players State 473
Check Players State 474
Check Players State 475
Check Players State 476
Check Players State 477
Check Players State 478
Check Players State 479
Check Players State 480
Check Players State 481
Check Players State 482
Check Players State 483
Check Players State 484
Check Players State 485
Check Players State 486
Check Players State 487
Check Players State 488
Check Players State 489
Check Players State 490
Check Players State 491
Check Players State 492
Check Players State 493
Check Players State 494
Check Players State 495
Check Players State 496
Check Players State 497
Check Players State 498
Check Players State 499
Check Players State 500
Check Players State 501
Check Players State 502
Check Players State 503
Check Players State 504
Check Players State 505
Check Players State 506
Check Players State 507
Check Players State 508
Check Players State 509
Check Players State 510
Check Players State 511
Check Players State 512
Check Players State 513
Check Players State 514
Check Players State 515
Check Players State 516
Check Players State 517
Check Players State 518
Check Players State 519
Check Players State 520
Check Players State 521
Check Players State 522
Check Players State 523
Check Players State 524
Check Players State 525
Check Players State 526
Check Players State 527
Check Players State 528
Check Players State 529
Check Players State 530
Check Players State 531
Check Players State 532
Check Players State 533
Check Players State 534
Check Players State 535
Check Players State 536
Check Players State 537
Check Players State 538
Check Players State 539
Check Players State 540
Check Players State 541
Check Players State 542
Check Players State 543
Check Players State 544
Check Players State 545
Check Players State 546
Check Players State 547
Check Players State 548
Check Players State 549
Check Players State 550
Check Players State 551
Check Players State 552
Check Players State 553
Check Players State 554
Check Players State 555
Check Players State 556
Check Players State 557
Check Players State 558
Check Players State 559
Check Players State 560
Check Players State 561
Check Players State 562
Check Players State 563
Check Players State 564
Check Players State 565
Check Players State 566
Check Players State 567
Check Players State 568
Check Players State 569
Check Players State 570
Check Players State 571
Check Players State 572
Check Players State 573
Check Players State 574
Check Players State 575
Check Players State 576
Check Players State 577
Check Players State 578
Check Players State 579
Check Players State 580
Check Players State 581
Check Players State 582
Check Players State 583
Check Players State 584
Check Players State 585
Check Players State 586
Check Players State 587
Check Players State 588
Check Players State 589
Check Players State 590
Check Players State 591
Check Players State 592
Check Players State 593
Check Players State 594
Check Players State 595
Check Players State 596
Check Players State 597
Check Players State 598
Check Players State 599
Check Players State 600
Check Players State 601
Check Players State 602
Check Players State 603
Check Players State 604
Check Players State 605
Check Players State 606
Check Players State 607
Check Players State 608
Check Players State 609
Check Players State 610
Check Players State 611
Check Players State 612
Check Players State 613
Check Players State 614
Check Players State 615
Check Players State 616
Check Players State 617
Check Players State 618
Check Players State 619
Check Players State 620
Check Players State 621
Check Players State 622
Check Players State 623
Check Players State 624
Check Players State 625
Check Players State 626
Check Players State 627
Check Players State 628
Check Players State 629
Check Players State 630
Check Players State 631
Check Players State 632
Check Players State 633
Check Players State 634
Check Players State 635
Check Players State 636
Check Players State 637
Check Players State 638
Check Players State 639
Check Players State 640
Check Players State 641
Check Players State 642
Check Players State 643
Check Players State 644
Check Players State 645
Check Players State 646
Check Players State 647
Check Players State 648
Check Players State 649
Check Players State 650
Check Players State 651
Check Players State 652
Check Players State 653
Check Players State 654
Check Players State 655
Check Players State 656
Check Players State 657
Check Players State 658
Check Players State 659
Check Players State 660
Check Players State 661
Check Players State 662
Check Players State 663
Check Players State 664
Check Players State 665
Check Players State 666
Check Players State 667
Check Players State 668
Check Players State 669
Check Players State 670
Check Players State 671
Check Players State 672
Check Players State 673
Check Players State 674
Check Players State 675
Check Players State 676
Check Players State 677
Check Players State 678
Check Players State 679
Check Players State 680
Check Players State 681
Check Players State 682
Check Players State 683
Check Players State 684
Check Players State 685
Check Players State 686
Check Players State 687
Check Players State 688
Check Players State 689
Check Players State 690
Check Players State 691
Check Players State 692
Check Players State 693
Check Players State 694
Check Players State 695
Check Players State 696
Check Players State 697
Check Players State 698
Check Players State 699
Check Players State 700
Check Players State 701
Check Players State 702
Check Players State 703
Check Players State 704
Check Players State 705
Check Players State 706
Check Players State 707
Check Players State 708
Check Players State 709
Check Players State 710
Check Players State 711
Check Players State 712
Check Players State 713
Check Players State 714
Check Players State 715
Check Players State 716
Check Players State 717
Check Players State 718
Check Players State 719
Check Players State 720
Check Players State 721
Check Players State 722
Check Players State 723
Check Players State 724
Check Players State 725
Check Players State 726
Check Players State 727
Check Players State 728
Check Players State 729
Check Players State 730
Check Players State 731
Check Players State 732
Check Players State 733
Check Players State 734
Check Players State 735
Check Players State 736
Check Players State 737
Check Players State 738
Check Players State 739
Check Players State 740
Check Players State 741
Check Players State 742
Check Players State 743
Check Players State 744
Check Players State 745
Check Players State 746
Check Players State 747
Check Players State 748
Check Players State 749
Check Players State 750
Check Players State 751
Check Players State 752
Check Players State 753
Check Players State 754
Check Players State 755
Check Players State 756
Check Players State 757
Check Players State 758
Check Players State 759
Check Players State 760
Check Players State 761
Check Players State 762
Check Players State 763
Check Players State 764
Check Players State 765
Check Players State 766
Check Players State 767
Check Players State 768
Check Players State 769
Check Players State 770
Check Players State 771
Check Players State 772
Check Players State 773
Check Players State 774
Check Players State 775
Check Players State 776
Check Players State 777
Check Players State 778
Check Players State 779
Check Players State 780
Check Players State 781
Check Players State 782
Check Players State 783
Check Players State 784
Check Players State 785
Check Players State 786
Check Players State 787
Check Players State 788
Check Players State 789
Check Players State 790
Check Players State 791
Check Players State 792
Check Players State 793
Check Players State 794
Check Players State 795
Check Players State 796
Check Players State 797
Check Players State 798
Check Players State 799
Check Players State 800
Check Players State 801
Check Players State 802
Check Players State 803
Check Players State 804
Check Players State 805
Check Players State 806
Check Players State 807
Check Players State 808
Check Players State 809
Check Players State 810
Check Players State 811
Check Players State 812
Check Players State 813
Check Players State 814
Check Players State 815
Check Players State 816
Check Players State 817
Check Players State 818
Check Players State 819
Check Players State 820
Check Players State 821
Check Players State 822
Check Players State 823
Check Players State 824
Check Players State 825
Check Players State 826
Check Players State 827
Check Players State 828
Check Players State 829
Check Players State 830
Check Players State 831
Check Players State 832
Check Players State 833
Check Players State 834
Check Players State 835
Check Players State 836
Check Players State 837
Check Players State 838
Check Players State 839
Check Players State 840
Check Players State 841
Check Players State 842
Check Players State 843
Check Players State 844
Check Players State 845
Check Players State 846
Check Players State 847
Check Players State 848
Check Players State 849
Check Players State 850
Check Players State 851
Check Players State 852
Check Players State 853
Check Players State 854
Check Players State 855
Check Players State 856
Check Players State 857
Check Players State 858
Check Players State 859
Check Players State 860
Check Players State 861
Check Players State 862
Check Players State 863
Check Players State 864
Check Players State 865
Check Players State 866
Check Players State 867
Check Players State 868
Check Players State 869
Check Players State 870
Check Players State 871
Check Players State 872
Check Players State 873
Check Players State 874
Check Players State 875
Check Players State 876
Check Players State 877
Check Players State 878
Check Players State 879
Check Players State 880
Check Players State 881
Check Players State 882
Check Players State 883
Check Players State 884
Check Players State 885
Check Players State 886
Check Players State 887
Check Players State 888
Check Players State 889
Check Players State 890
Check Players State 891
Check Players State 892
Check Players State 893
Check Players State 894
Check Players State 895
Check Players State 896
Check Players State 897
Check Players State 898
Check Players State 899
Check Players State 900
Check Players State 901
Check Players State 902
Check Players State 903
Check Players State 904
Check Players State 905
Check Players State 906
Check Players State 907
Check Players State 908
Check Players State 909
Check Players State 910
Check Players State 911
Check Players State 912
Check Players State 913
Check Players State 914
Check Players State 915
Check Players State 916
Check Players State 917
Check Players State 918
Check Players State 919
Check Players State 920
Check Players State 921
Check Players State 922
Check Players State 923
Check Players State 924
Check Players State 925
Check Players State 926
Check Players State 927
Check Players State 928
Check Players State 929
Check Players State 930
Check Players State 931
Check Players State 932
Check Players State 933
Check Players State 934
Check Players State 935
Check Players State 936
Check Players State 937
Check Players State 938
Check Players State 939
Check Players State 940
Check Players State 941
Check Players State 942
Check Players State 943
Check Players State 944
Check Players State 945
Check Players State 946
Check Players State 947
Check Players State 948
Check Players State 949
Check Players State 950
Check Players State 951
Check Players State 952
Check Players State 953
Check Players State 954
Check Players State 955
Check Players State 956
Check Players State 957
Check Players State 958
Check Players State 959
Check Players State 960
Check Players State 961
Check Players State 962
Check Players State 963
Check Players State 964
Check Players State 965
Check Players State 966
Check Players State 967
Check Players State 968
Check Players State 969
Check Players State 970
Check Players State 971
Check Players State 972
Check Players State 973
Check Players State 974
Check Players State 975
Check Players State 976
Check Players State 977
Check Players State 978
Check Players State 979
Check Players State 980
Check Players State 981
Check Players State 982
Check Players State 983
Check Players State 984
Check Players State 985
Check Players State 986
Check Players State 987
Check Players State 988
Check Players State 989
Check Players State 990
Check Players State 991
Check Players State 992
Check Players State 993
Check Players State 994
Check Players State 995
Check Players State 996
Check Players State 997
Check Players State 998
Check Players State 999

Random TESTING VILLAGE CARD Successfully
File 'randomtestcard2.c'
Lines executed:70.27% of 37
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
No calls
randomtestcard2.c:creating 'randomtestcard2.c.gcov'

File 'dominion.c'
Lines executed:21.73% of 649
Branches executed:18.71% of 417
Taken at least once:15.35% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "string.h"
        -:    9:#include "time.h"
        -:   10:
        -:   11:#define RANDOM_TEST_MAX 1000
        -:   12:
function main called 1 returned 100% blocks executed 73%
        -:   13:int main()
        -:   14:{
        -:   15:    struct gameState test;
        1:   16:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        1:   17:    srand(time(NULL));
        -:   18:
        1:   19:    printf("\n====TESTING VILLAGE CARD:====\n");
        -:   20:
        1:   21:    printf ("========RANDOM TESTS=========\n");
        1:   22:    int testFailed = 0;
        -:   23:
     2002:   24:    for (int i = 0; i < RANDOM_TEST_MAX; i++){
branch  0 taken 1000
branch  1 taken 1
     1000:   25:    	int numPlayers = (rand() % 3)+2;
     1000:   26:    	int currentPlayer = 0;
        -:   27:
        -:   28:    	//initialize game 
     1000:   29:    	initializeGame(numPlayers, k, rand(), &test);
     1000:   30:		test.whoseTurn = rand() % test.numPlayers;
     1000:   31:		currentPlayer = whoseTurn(&test);
        -:   32:	
     1000:   33:		test.handCount[currentPlayer] = (rand() % (MAX_HAND/numPlayers))+1;
     1000:   34:        test.deckCount[currentPlayer] = (rand() % (MAX_DECK/numPlayers))+1;
        -:   35:
     1000:   36:        int handPos = rand() % test.handCount[currentPlayer];
        -:   37:
     1000:   38:        int handCount = test.handCount[currentPlayer];
     1000:   39:    	int deckCount = test.deckCount[currentPlayer];
        -:   40:    	//int discardCount = test.discardCount[currentPlayer];
     1000:   41:    	int numActions = test.numActions;
     1000:   42:    	villageCardEffect(currentPlayer,&test,handPos);
     1000:   43:   		printf("Check Players State %d\n", i);
     1000:   44:   		if(test.handCount[currentPlayer] != handCount ){
branch  0 taken 0
branch  1 taken 1000
    #####:   45:   			testFailed = 1;
    #####:   46:   			printf("handCount don't match Actual: %d Expected: %d\n",test.handCount[currentPlayer], handCount + 2);
    #####:   47:   		}
     1000:   48:   		if(test.deckCount[currentPlayer] != deckCount - 1 ){
branch  0 taken 0
branch  1 taken 1000
    #####:   49:   			testFailed = 1;
    #####:   50:   			printf("deckCount don't match Actual: %d Expected: %d\n",test.deckCount[currentPlayer], deckCount - 3);
    #####:   51:   		}
     1000:   52:   		if(test.numActions != numActions + 2){
branch  0 taken 0
branch  1 taken 1000
    #####:   53:	    	testFailed = 1;
    #####:   54:	      	printf("numActions don't match Actual: %d Expected: %d\n",test.numActions , numActions + 2);
    #####:   55:	    }
        -:   56:
     1000:   57:    }
        1:   58:    if(testFailed){
branch  0 taken 0
branch  1 taken 1
    #####:   59:		printf("\nnRandom TESTING VILLAGE CARD Failed:\n");
    #####:   60:    }else{
        1:   61:    	printf("\nRandom TESTING VILLAGE CARD Successfully\n");
        -:   62:    }
        1:   63:    return 0;
        -:   64:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 126112 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
   126112:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0
branch  1 taken 126112
    #####:   10:    return 1;
   126112:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 45040
branch  1 taken 81072
    45040:   12:    return -1;
    81072:   13:  return 0;
   126112:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 3000 returned 100% blocks executed 90%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     3000:   44:  SelectStream(1);
     3000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     6000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 3000
branch  1 taken 0
branch  2 taken 0
branch  3 taken 3000
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     3000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    66000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 30000
branch  1 taken 3000
        -:   58:    {
   660000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 300000
branch  1 taken 30000
        -:   60:        {
   570000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 270000
branch  1 taken 30000
branch  2 taken 0
branch  3 taken 270000
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   300000:   65:        }
    30000:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     3000:   73:  if (numPlayers == 2)
branch  0 taken 999
branch  1 taken 2001
        -:   74:    {
      999:   75:      state->supplyCount[curse] = 10;
      999:   76:    }
     2001:   77:  else if (numPlayers == 3)
branch  0 taken 994
branch  1 taken 1007
        -:   78:    {
      994:   79:      state->supplyCount[curse] = 20;
      994:   80:    }
        -:   81:  else
        -:   82:    {
     1007:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     3000:   87:  if (numPlayers == 2)
branch  0 taken 999
branch  1 taken 2001
        -:   88:    {
      999:   89:      state->supplyCount[estate] = 8;
      999:   90:      state->supplyCount[duchy] = 8;
      999:   91:      state->supplyCount[province] = 8;
      999:   92:    }
        -:   93:  else
        -:   94:    {
     2001:   95:      state->supplyCount[estate] = 12;
     2001:   96:      state->supplyCount[duchy] = 12;
     2001:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     3000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     3000:  102:  state->supplyCount[silver] = 40;
     3000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   126000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 60000
branch  1 taken 3000
        -:  107:    {
   990000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 465000
branch  1 taken 30000
        -:  109:	{
   465000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 30000
branch  1 taken 435000
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    60000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 30000
branch  1 taken 0
branch  2 taken 0
branch  3 taken 30000
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
    30000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    30000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   435000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   435000:  130:	}
        -:  131:
    60000:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    24016:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 9008
branch  1 taken 3000
        -:  139:    {
     9008:  140:      state->deckCount[i] = 0;
    72064:  141:      for (j = 0; j < 3; j++)
branch  0 taken 27024
branch  1 taken 9008
        -:  142:	{
    27024:  143:	  state->deck[i][j] = estate;
    27024:  144:	  state->deckCount[i]++;
    27024:  145:	}
   144128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 63056
branch  1 taken 9008
        -:  147:	{
    63056:  148:	  state->deck[i][j] = copper;
    63056:  149:	  state->deckCount[i]++;		
    63056:  150:	}
     9008:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    24016:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 9008
branch  1 taken 3000
        -:  155:    {
     9008:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0
branch  1 taken 9008
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     9008:  160:    }
        -:  161:
        -:  162:  //draw player hands
    24016:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 9008
branch  1 taken 3000
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     9008:  166:      state->handCount[i] = 0;
     9008:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     9008:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   168000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 81000
branch  1 taken 3000
        -:  177:    {
    81000:  178:      state->embargoTokens[i] = 0;
    81000:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     3000:  182:  state->outpostPlayed = 0;
     3000:  183:  state->phase = 0;
     3000:  184:  state->numActions = 1;
     3000:  185:  state->numBuys = 1;
     3000:  186:  state->playedCardCount = 0;
     3000:  187:  state->whoseTurn = 0;
     3000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    36000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 15000
branch  1 taken 3000
    15000:  193:    drawCard(state->whoseTurn, state);
    15000:  194:  }
        -:  195:
     3000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     3000:  198:  return 0;
     3000:  199:}
        -:  200:
function shuffle called 9053 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     9053:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     9053:  209:  if (state->deckCount[player] < 1)
branch  0 taken 45
branch  1 taken 9008
       45:  210:    return -1;
     9008:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   198176:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 90080
branch  1 taken 9008
    90080:  215:    card = floor(Random() * state->deckCount[player]);
    90080:  216:    newDeck[newDeckPos] = state->deck[player][card];
    90080:  217:    newDeckPos++;
   585356:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 202598
branch  1 taken 90080
   202598:  219:      state->deck[player][i] = state->deck[player][i+1];
   202598:  220:    }
    90080:  221:    state->deckCount[player]--;
        -:  222:  }
   198176:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90080
branch  1 taken 9008
    90080:  224:    state->deck[player][i] = newDeck[i];
    90080:  225:    state->deckCount[player]++;
    90080:  226:  }
        -:  227:
     9008:  228:  return 0;
     9053:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 3000 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
     3000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 22000 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    22000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 45
branch  1 taken 21955
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       90:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 45
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
       45:  538:    state->deckCount[player] = state->discardCount[player];
       45:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       45:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       45:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       45:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       45:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       45:  559:    if (deckCounter == 0)
branch  0 taken 45
branch  1 taken 0
       45:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
    21955:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    21955:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    21955:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    21955:  576:    state->deckCount[player]--;
    21955:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    21955:  580:  return 0;
    22000:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  //int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerCardEffect(drawntreasure, temphand, z, currentPlayer, state);
    #####:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
    #####:  674:      council_roomCardEffect(currentPlayer, state, handPos);
    #####:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      feastCardEffect(choice1, temphand, currentPlayer, state, handPos);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
    #####:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
    #####:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
        -:  746:      //+3 Cards
    #####:  747:      smithyCardEffect(currentPlayer,state,handPos);
    #####:  748:      return 0;
        -:  749:		
        -:  750:    case village:
    #####:  751:      villageCardEffect(currentPlayer,state,handPos);
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
    #####:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  780:		isGameOver(state);
    #####:  781:	      }
    #####:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
    #####:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
    #####:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  797:	    isGameOver(state);
    #####:  798:	  }
    #####:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
    #####:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
    #####:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  857:			{
    #####:  858:			  drawCard(i, state);
    #####:  859:			}
    #####:  860:		    }
    #####:  861:		}
    #####:  862:	    }
        -:  863:				
    #####:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	  drawCard(currentPlayer, state);
    #####:  873:	}
    #####:  874:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
    #####:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
    #####:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
    #####:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
    #####:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
    #####:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
    #####:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  935:	  state->coins += 2;
    #####:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	  drawCard(currentPlayer, state);
    #####:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
    #####:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  965:	    {
    #####:  966:	      j++;
    #####:  967:	    }
    #####:  968:	}
    #####:  969:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  986:	    }
    #####:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    #####: 1000:		  break;
        -: 1001:		}
    #####: 1002:	    }
    #####: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
    #####: 1030:		}
        -: 1031:					
    #####: 1032:	    }
        -: 1033:				
    #####: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1085:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1089:	}
    #####: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
    #####: 1103:	}
    #####: 1104:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
    #####: 1125:}
        -: 1126:
function discardCard called 3000 returned 100% blocks executed 80%
        -: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
     3000: 1131:  if (trashFlag < 1)
branch  0 taken 3000
branch  1 taken 0
        -: 1132:    {
        -: 1133:      //add card to played pile
     3000: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     3000: 1135:      state->playedCardCount++;
     3000: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
     3000: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
     3000: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0
branch  1 taken 3000
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
    #####: 1145:      state->handCount[currentPlayer]--;
    #####: 1146:    }
     3000: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0
branch  1 taken 3000
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
    #####: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
     3000: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
     3000: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
     3000: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
     3000: 1162:  return 0;
        -: 1163:}
        -: 1164:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1170:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1171:    {
    #####: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
    #####: 1180:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1181:    {
    #####: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1183:      state->deckCount[player]++;
    #####: 1184:    }
    #####: 1185:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
    #####: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
    #####: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
    #####: 1199:  return 0;
    #####: 1200:}
        -: 1201:
function updateCoins called 3000 returned 100% blocks executed 85%
        -: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
     3000: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
    36000: 1210:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15000
branch  1 taken 3000
        -: 1211:    {
    15000: 1212:      if (state->hand[player][i] == copper)
branch  0 taken 10469
branch  1 taken 4531
        -: 1213:	{
    10469: 1214:	  state->coins += 1;
    10469: 1215:	}
     4531: 1216:      else if (state->hand[player][i] == silver)
branch  0 taken 0
branch  1 taken 4531
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
    #####: 1219:	}
     4531: 1220:      else if (state->hand[player][i] == gold)
branch  0 taken 0
branch  1 taken 4531
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
    #####: 1223:	}	
    15000: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
     3000: 1227:  state->coins += bonus;
        -: 1228:
     3000: 1229:  return 0;
        -: 1230:}
        -: 1231:
function adventurerCardEffect called 0 returned 0% blocks executed 0%
        -: 1232:void adventurerCardEffect(int drawntreasure, int temphand[], int z, int currentPlayer, struct gameState *state){
    #####: 1233:  while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1235:      shuffle(currentPlayer, state);
    #####: 1236:    }
    #####: 1237:    drawCard(currentPlayer, state);
    #####: 1238:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1239:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1240:      drawntreasure++;
        -: 1241:    else{
    #####: 1242:      temphand[z]=cardDrawn;
    #####: 1243:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1244:      z++;
        -: 1245:    }
        -: 1246:  }
    #####: 1247:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1248:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1249:    z=z-1;
        -: 1250:  }
    #####: 1251:}
        -: 1252:
function feastCardEffect called 0 returned 0% blocks executed 0%
        -: 1253:void feastCardEffect(int choice1, int temphand[], int currentPlayer, struct gameState *state, int handPos){
        -: 1254:  int i;
    #####: 1255:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1256:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1257:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1258:  }
        -: 1259:  //Backup hand
        -: 1260:  
        -: 1261:  //Update Coins for Buy
    #####: 1262:  updateCoins(currentPlayer, state, 5);
    #####: 1263:  int x = 1;//Condition to loop on
    #####: 1264:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1265:    if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -: 1266:      if (DEBUG)
        -: 1267:        printf("None of that card left, sorry!\n");
        -: 1268:
        -: 1269:      if (DEBUG)
        -: 1270:        printf("Cards Left: %d\n", supplyCount(choice1, state));
    #####: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
    #####: 1278:    }
        -: 1279:    else{
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1283:      }
        -: 1284:
    #####: 1285:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1286:      x = 0;//No more buying cards
        -: 1287:
        -: 1288:      if (DEBUG){
        -: 1289:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1290:      }
        -: 1291:
        -: 1292:    }
        -: 1293:  }     
        -: 1294:
        -: 1295:  //Reset Hand
    #####: 1296:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1297:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1298:    temphand[i] = -1;
    #####: 1299:  }
    #####: 1300:} 
        -: 1301:
        -: 1302:
function council_roomCardEffect called 0 returned 0% blocks executed 0%
        -: 1303:void council_roomCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1304:  int i;
        -: 1305:  //+4 Cards
    #####: 1306:  for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1307:    drawCard(currentPlayer, state);
    #####: 1308:  }
        -: 1309:      
        -: 1310:  //+1 Buy
    #####: 1311:  state->numBuys++;
        -: 1312:      
        -: 1313:  //Each other player draws a card
    #####: 1314:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1315:    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1316:    {
    #####: 1317:      drawCard(i, state);
    #####: 1318:    }
    #####: 1319:  }
        -: 1320:      
        -: 1321:  //put played card in played card pile
    #####: 1322:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1323:}
        -: 1324:
function smithyCardEffect called 2000 returned 100% blocks executed 100%
        -: 1325:void smithyCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:  int i;
    16000: 1327:  for (i = 0; i < 3; i++)
branch  0 taken 6000
branch  1 taken 2000
        -: 1328:  {
     6000: 1329:    drawCard(currentPlayer, state);
     6000: 1330:  }
        -: 1331:      
        -: 1332:  //discard card from hand
     2000: 1333:  discardCard(handPos, currentPlayer, state, 0);
     2000: 1334:}
        -: 1335:
function villageCardEffect called 1000 returned 100% blocks executed 100%
        -: 1336:void villageCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1337:  //+1 Card
     1000: 1338:  drawCard(currentPlayer, state);
        -: 1339:      
        -: 1340:  //+2 Actions
     1000: 1341:  state->numActions = state->numActions + 2;
        -: 1342:      
        -: 1343:  //discard played card from hand
     1000: 1344:  discardCard(handPos, currentPlayer, state, 0);
     1000: 1345:}
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
